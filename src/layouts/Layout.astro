---
export interface Props {
  title?: string;
  description?: string;
  seoData?: {
    title?: string;
    description?: string;
    keywords?: string;
    canonicalUrl?: string;
    featuredImage?: string;
    appName?: string;
    appVersion?: string;
    appCategory?: string;
    appRating?: number;
    appVotes?: number;
    appPublisher?: string;
    appSize?: string;
    lastUpdated?: string;
    type?: 'website' | 'article' | 'product';
  };
}

import TelegramHelpButton from '../components/TelegramHelpButton.astro';

const { 
  title = "DexAPK - Fast & Secure APK Downloads", 
  description = "Download the latest Android APK files safely and quickly. DexAPK provides secure APK downloads with fast loading times.",
  seoData
} = Astro.props;

// Use SEO data if provided, otherwise use default props
// Remove "- DexAPK" suffix if it exists
const cleanTitle = (titleText) => {
  return titleText.replace(/\s*-\s*DexAPK\s*$/, '');
};

const finalTitle = cleanTitle(seoData?.title || title);
const finalDescription = seoData?.description || description;

// Organization schema
const organizationSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "DexAPK",
  "url": "https://dexapk.com",
  "logo": "https://dexapk.com/web-app-manifest-512x512.png",
  "sameAs": [
    "https://twitter.com/dexapk",
    "https://github.com/dexapk"
  ]
};

// Website schema
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": "DexAPK",
  "url": "https://dexapk.com",
  "potentialAction": {
    "@type": "SearchAction",
    "target": "https://dexapk.com/search?q={search_term_string}",
    "query-input": "required name=search_term_string"
  }
};
---

<!doctype html>
<html lang="en-US">
  <head>
    <!-- Google tag (gtag.js) -->
    <!-- Lightweight analytics script -->
    <script>
      // Google tag (gtag.js) - GA4 implementation
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-SBX87GMGRB');
    </script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-SBX87GMGRB"></script>
    
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href="/favicon-96x96.png" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <meta http-equiv="content-language" content="en-US" />
    <title>{finalTitle}</title>
    <meta name="title" content={finalTitle} />
    <meta name="description" content={finalDescription} />
    
    <!-- SEO Meta Tags -->
    {seoData?.keywords && <meta name="keywords" content={seoData.keywords} />}
    <meta name="author" content="DexAPK" />
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
    <meta name="googlebot" content="index, follow" />
    <meta name="bingbot" content="index, follow" /> 

    <!-- Canonical URL -->
    {seoData?.canonicalUrl && <link rel="canonical" href={seoData.canonicalUrl} />}

    <!-- Language and Locale -->
    <meta name="language" content="en-US" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={seoData?.type || "website"} />
    <meta property="og:url" content={seoData?.canonicalUrl || Astro.url.href} />
    <meta property="og:title" content={finalTitle} />
    <meta property="og:description" content={finalDescription} />
    <meta property="og:image" content={seoData?.featuredImage || "/web-app-manifest-512x512.png"} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={finalTitle} /> 
    <meta property="og:site_name" content="DexAPK" /> 
    <meta property="og:locale" content="en_US" /> 

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={seoData?.canonicalUrl || Astro.url.href} />
    <meta property="twitter:title" content={finalTitle} />
    <meta property="twitter:description" content={finalDescription} />
    <meta property="twitter:image" content={seoData?.featuredImage || "/web-app-manifest-512x512.png"} />
    <meta property="twitter:image:alt" content={finalTitle} />
    <meta property="twitter:site" content="@dexapk" />
    <meta property="twitter:creator" content="@dexapk" />

    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#3b82f6" />
    <meta name="msapplication-TileColor" content="#3b82f6" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="DexAPK" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="image-rendering" content="auto" />
    <meta http-equiv="Accept-CH" content="DPR, Width, Viewport-Width" />
    <meta name="color-scheme" content="dark light" />
    
    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin="anonymous" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="anonymous" />
    <link rel="preconnect" href="https://cdn.dexapk.com" crossorigin />
    <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin />
    
    <!-- Preload critical fonts -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Open+Sans:wght@400;600&display=swap" as="style" />

    <!-- App-specific Meta Tags -->
    {seoData?.appName && (
      <>
        <meta name="application-name" content={seoData.appName} />
        <meta property="al:android:app_name" content={seoData.appName} />
        <meta property="al:android:package" content={`com.${seoData.appName.toLowerCase().replace(/\s+/g, '')}`} />
      </>
    )}

    <!-- Favicon and Icons -->
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
    <link rel="icon" type="image/png" sizes="192x192" href="/web-app-manifest-192x192.png" />
    <link rel="icon" type="image/png" sizes="512x512" href="/web-app-manifest-512Ã—512-new.png" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="mask-icon" href="/favicon-96x96.png" color="#3b82f6" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" sizes="16x16 32x32" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Web App Manifest -->
    <link rel="manifest" href="/manifest.json" />

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet" media="print" onload="this.media='all'" />
    <noscript>
      <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet" />
    </noscript>
    
    <!-- DNS Prefetch for better performance -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />

    <!-- Base Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(organizationSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />

    <!-- App Structured Data -->
    {seoData?.appName && (
      <script type="application/ld+json" set:html={JSON.stringify({
          "@context": "https://schema.org",
          "@type": "SoftwareApplication",
          "name": seoData.appName,
          "applicationCategory": "MobileApplication",
          "operatingSystem": "Android",
          "offers": {
            "@type": "Offer",
            "price": "0",
            "priceCurrency": "USD"
          },
          ...(seoData.appVersion && { "softwareVersion": seoData.appVersion }),
          ...(seoData.appCategory && { "applicationSubCategory": seoData.appCategory }),
          ...(seoData.appRating && seoData.appVotes && {
            "aggregateRating": {
              "@type": "AggregateRating",
              "ratingValue": seoData.appRating,
              "ratingCount": seoData.appVotes,
              "bestRating": "5",
              "worstRating": "1"
            }
          }),
          ...(seoData.appPublisher && {
            "author": {
              "@type": "Organization",
              "name": seoData.appPublisher
            }
          }),
          ...(seoData.appSize && { "fileSize": seoData.appSize }),
          ...(seoData.lastUpdated && { "dateModified": seoData.lastUpdated }),
          ...(finalDescription && { "description": finalDescription }),
          ...(seoData.featuredImage && { "image": seoData.featuredImage })
        })} />
    )}

    <!-- Additional SEO Meta Tags -->
    <meta name="rating" content="general" />
    <meta name="distribution" content="global" />
    <meta name="revisit-after" content="1 days" />
    <meta name="coverage" content="Worldwide" />
    <meta name="target" content="all" /> 
    <meta name="HandheldFriendly" content="true" />
    <meta name="MobileOptimized" content="320" />

    <!-- Security Headers -->
    <!-- Security headers are now set in netlify.toml instead of meta tags -->

    <!-- RSS Feed and Sitemap -->
    <link rel="alternate" type="application/rss+xml" title="DexAPK RSS Feed" href="/rss.xml" />
    <link rel="sitemap" type="application/xml" href="/sitemap.xml" />
    
    <!-- Theme Detection Script -->
    <script is:inline defer>
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      
      const isDark = getThemePreference() === 'dark';
      document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
      
      if (typeof localStorage !== 'undefined') {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
      }
    </script>
  </head>
  <body class="bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300" id="main-body">
    <slot />
    <TelegramHelpButton />
    
    <!-- Accessibility Controls -->
    <div class="fixed bottom-20 left-4 z-40 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-3 flex flex-col gap-2 border border-gray-200 dark:border-gray-700">
      <button id="toggle-dyslexia" class="p-2 rounded-lg bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm font-medium hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors" aria-label="Toggle dyslexia-friendly mode">
        <span class="sr-only">Dyslexia Mode</span>
        <span aria-hidden="true">Aa</span>
      </button>
      <button id="toggle-contrast" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" aria-label="Toggle high contrast mode">
        <span class="sr-only">High Contrast</span>
        <span aria-hidden="true">A/A</span>
      </button>
      <button id="increase-font" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" aria-label="Increase font size">
        <span class="sr-only">Larger Text</span>
        <span aria-hidden="true">A+</span>
      </button>
    </div>
  </body>
</html>

<style>
  html {
    font-family: 'Inter', system-ui, sans-serif;
    scroll-behavior: auto; /* Changed from smooth for users with motion sensitivity */
  }
  
  body {
    margin: 0;
    width: 100%;
    min-height: 100vh;
    line-height: 1.8;
  }
  
  * {
    box-sizing: border-box;
  }

  /* Responsive font size adjustments */
  @media (max-width: 640px) {
    html {
      font-size: 15px;
    }
  }

  /* Reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    html {
      scroll-behavior: auto;
    }
    
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>

<script>
  // Accessibility controls
  document.addEventListener('DOMContentLoaded', () => {
    const body = document.getElementById('main-body');
    const dyslexiaButton = document.getElementById('toggle-dyslexia');
    const contrastButton = document.getElementById('toggle-contrast');
    const increaseFontButton = document.getElementById('increase-font');
    
    // Check for saved preferences
    const dyslexiaMode = localStorage.getItem('dyslexia-mode') === 'true';
    const highContrastMode = localStorage.getItem('high-contrast-mode') === 'true';
    const fontSize = localStorage.getItem('font-size') || '100';
    
    // Apply saved preferences
    if (dyslexiaMode && body) body.classList.add('dyslexia-mode');
    if (highContrastMode && body) body.classList.add('high-contrast-mode');
    if (fontSize !== '100' && body) {
      body.style.fontSize = `${fontSize}%`;
    }
    
    // Toggle dyslexia-friendly mode
    dyslexiaButton?.addEventListener('click', () => {
      body?.classList.toggle('dyslexia-mode');
      const isEnabled = body?.classList.contains('dyslexia-mode');
      localStorage.setItem('dyslexia-mode', isEnabled ? 'true' : 'false');
      
      // Announce to screen readers
      announceToScreenReader(`Dyslexia-friendly mode ${isEnabled ? 'enabled' : 'disabled'}`);
    });
    
    // Toggle high contrast mode
    contrastButton?.addEventListener('click', () => {
      body?.classList.toggle('high-contrast-mode');
      const isEnabled = body?.classList.contains('high-contrast-mode');
      localStorage.setItem('high-contrast-mode', isEnabled ? 'true' : 'false');
      
      // Announce to screen readers
      announceToScreenReader(`High contrast mode ${isEnabled ? 'enabled' : 'disabled'}`);
    });
    
    // Increase font size
    increaseFontButton?.addEventListener('click', () => {
      const currentSize = parseInt(localStorage.getItem('font-size') || '100');
      const newSize = currentSize < 150 ? currentSize + 10 : 100;
      
      if (body) body.style.fontSize = `${newSize}%`;
      localStorage.setItem('font-size', newSize.toString());
      
      // Announce to screen readers
      announceToScreenReader(`Font size ${newSize === 100 ? 'reset to default' : 'increased to ' + newSize + ' percent'}`);
    });
    
    // Function for screen reader announcements
    function announceToScreenReader(message) {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'assertive');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
  });
</script>