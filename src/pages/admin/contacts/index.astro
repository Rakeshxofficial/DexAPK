---
export const prerender = false; // Enable server-side rendering for admin pages

import Layout from '../../../layouts/Layout.astro';
import { getAllContactMessages } from '../../../lib/supabase.js';

// Fetch all contact messages
let contactMessages = [];
try {
  contactMessages = await getAllContactMessages();
} catch (error) {
  console.error('Error loading contact messages:', error);
  contactMessages = [];
}

const title = "Manage Contact Messages - Admin Dashboard";
const description = "View and manage contact form submissions in the admin dashboard";
---

<Layout title={title} description={description}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    
    <!-- Admin Header -->
    <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          
          <!-- Breadcrumb -->
          <nav class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
            <a href="/admin" class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200">
              Admin
            </a>
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
            </svg>
            <span class="text-gray-900 dark:text-white font-medium">Contact Messages</span>
          </nav>

          <!-- User Menu -->
          <div class="flex items-center space-x-4">
            <div class="text-right">
              <p class="text-sm font-medium text-gray-900 dark:text-white" id="user-email">Loading...</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">Administrator</p>
            </div>
            <button
              id="logout-btn"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-red-600 hover:bg-red-700 transition-colors duration-200"
            >
              <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
              </svg>
              Logout
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      
      <!-- Page Header -->
      <div class="flex items-center justify-between mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Contact Messages</h1>
          <p class="text-gray-600 dark:text-gray-400 mt-2">View and manage messages from the contact form</p>
        </div>
        <div class="flex items-center space-x-3">
          <button
            id="refresh-btn"
            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200"
          >
            <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
            </svg>
            Refresh
          </button>
          <button
            id="mark-all-read-btn"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200"
          >
            <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            Mark All as Read
          </button>
        </div>
      </div>

      <!-- Filters -->
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          
          <!-- Search -->
          <div class="flex-1 max-w-md">
            <label for="search-messages" class="sr-only">Search messages</label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="w-5 h-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
              </div>
              <input
                type="text"
                id="search-messages"
                class="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                placeholder="Search by name, email, or subject..."
              />
            </div>
          </div>

          <!-- Filters -->
          <div class="flex flex-wrap items-center gap-4">
            
            <!-- Status Filter -->
            <div>
              <label for="status-filter" class="sr-only">Filter by status</label>
              <select
                id="status-filter"
                class="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                aria-label="Filter by status"
              >
                <option value="">All Messages</option>
                <option value="unread">Unread Only</option>
                <option value="read">Read Only</option>
              </select>
            </div>

            <!-- Subject Filter -->
            <div>
              <label for="subject-filter" class="sr-only">Filter by subject</label>
              <select
                id="subject-filter"
                class="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                aria-label="Filter by subject"
              >
                <option value="">All Subjects</option>
                <option value="General Inquiry">General Inquiry</option>
                <option value="App Request">App Request</option>
                <option value="Report a Bug">Report a Bug</option>
                <option value="Broken Link">Broken Link</option>
                <option value="Business Inquiry">Business Inquiry</option>
                <option value="Other">Other</option>
              </select>
            </div>

          </div>
        </div>
      </div>

      <!-- Messages List -->
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
              All Messages (<span id="messages-count">{contactMessages.length}</span>)
            </h3>
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-500 dark:text-gray-400">
                <span id="unread-count">0</span> unread
              </span>
            </div>
          </div>
        </div>
        
        <div id="messages-container" class="divide-y divide-gray-200 dark:divide-gray-700">
          {contactMessages.length > 0 ? (
            contactMessages.map((message) => (
              <div 
                class={`message-item p-6 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 ${!message.is_read ? 'bg-blue-50 dark:bg-blue-900/10' : ''}`}
                data-id={message.id}
                data-name={message.name}
                data-email={message.email}
                data-subject={message.subject}
                data-message={message.message}
                data-created={message.created_at}
                data-read={message.is_read}
              >
                <div class="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                  <div class="flex-1">
                    <div class="flex items-center gap-3 mb-2">
                      {!message.is_read && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                          New
                        </span>
                      )}
                      <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
                        {message.subject}
                      </h4>
                    </div>
                    <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3">
                      <span class="font-medium text-gray-900 dark:text-white">{message.name}</span>
                      <span class="mx-2">•</span>
                      <a href={`mailto:${message.email}`} class="text-blue-600 dark:text-blue-400 hover:underline">
                        {message.email}
                      </a>
                      <span class="mx-2">•</span>
                      <span title={new Date(message.created_at).toLocaleString()}>
                        {new Date(message.created_at).toLocaleDateString()} at {new Date(message.created_at).toLocaleTimeString()}
                      </span>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 whitespace-pre-wrap">
                      {message.message}
                    </p>
                  </div>
                  <div class="flex flex-row md:flex-col items-center md:items-end gap-3 mt-4 md:mt-0">
                    <button
                      class="mark-read-btn inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200"
                      data-id={message.id}
                      style={message.is_read ? 'display: none;' : ''}
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                      </svg>
                      Mark as Read
                    </button>
                    <button
                      class="reply-btn inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200"
                      data-email={message.email}
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                      </svg>
                      Reply
                    </button>
                    <button
                      class="delete-btn inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-red-600 hover:bg-red-700 transition-colors duration-200"
                      data-id={message.id}
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                      </svg>
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div class="text-center py-12">
              <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No messages yet</h3>
              <p class="text-gray-500 dark:text-gray-400">When users submit the contact form, their messages will appear here.</p>
            </div>
          )}
        </div>
      </div>

    </main>
  </div>

  <!-- Message Detail Modal -->
  <div id="message-detail-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
    <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-2xl w-full mx-4">
      <div class="flex items-center justify-between mb-6">
        <h3 class="text-xl font-bold text-gray-900 dark:text-white" id="modal-subject">Message Subject</h3>
        <button
          id="close-modal"
          class="inline-flex items-center justify-center p-2 rounded-lg text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200"
        >
          <span class="sr-only">Close modal</span>
          <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      
      <div class="mb-6">
        <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4">
          <span class="font-medium text-gray-900 dark:text-white" id="modal-name">Sender Name</span>
          <span class="mx-2">•</span>
          <a href="#" id="modal-email" class="text-blue-600 dark:text-blue-400 hover:underline">
            email@example.com
          </a>
          <span class="mx-2">•</span>
          <span id="modal-date">Date and Time</span>
        </div>
        
        <div class="bg-gray-50 dark:bg-gray-700 rounded-xl p-6">
          <p class="text-gray-700 dark:text-gray-300 whitespace-pre-wrap" id="modal-message">
            Message content will appear here.
          </p>
        </div>
      </div>
      
      <div class="flex items-center justify-end space-x-4">
        <button
          id="modal-mark-read"
          class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200"
        >
          <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
          Mark as Read
        </button>
        <button
          id="modal-reply"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200"
        >
          <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
          Reply
        </button>
        <button
          id="modal-delete"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-red-600 hover:bg-red-700 transition-colors duration-200"
        >
          <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
          </svg>
          Delete
        </button>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
    <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md mx-4">
      <div class="text-center">
        <div class="w-16 h-16 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-600 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Delete Message</h3>
        <p class="text-gray-600 dark:text-gray-400 mb-6">
          Are you sure you want to delete this message? This action cannot be undone.
        </p>
        <div class="flex items-center justify-center space-x-4">
          <button
            id="cancel-delete"
            type="button"
            class="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
          >
            Cancel
          </button>
          <button
            id="confirm-delete"
            type="button"
            class="px-6 py-3 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors duration-200"
          >
            Delete Message
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
    <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-sm mx-4 text-center">
      <div class="animate-spin w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Processing...</h3>
      <p class="text-gray-600 dark:text-gray-400">Please wait while we process your request.</p>
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast" class="fixed bottom-4 right-4 bg-green-600 text-white px-6 py-4 rounded-xl shadow-lg transform translate-y-full transition-transform duration-300 z-50">
    <div class="flex items-center gap-3">
      <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
      </svg>
      <span id="toast-message">Action completed successfully!</span>
    </div>
  </div>

</Layout>

<script>
  import { getCurrentUser, signOut } from '../../../lib/auth.js';
  import { getAllContactMessages, markMessageAsRead, deleteContactMessage } from '../../../lib/supabase.js';

  let allMessages = [];
  let filteredMessages = [];
  let messageToDelete = null;
  let deleteInProgress = false;

  document.addEventListener('DOMContentLoaded', function() {
    // Check authentication
    checkAuth();
    
    // Load messages
    loadMessages();
    
    // Set up event listeners
    setupEventListeners();
  });

  async function checkAuth() {
    try {
      const result = await getCurrentUser();
      
      if (!result.success || !result.user) {
        window.location.href = '/admin/login';
        return;
      }
      
      // Display user email
      document.getElementById('user-email').textContent = result.user.email;
    } catch (error) {
      console.error('Auth check failed:', error);
      window.location.href = '/admin/login';
    }
  }

  async function loadMessages() {
    try {
      showLoading();
      console.log('Loading messages from server...');

      const messages = await getAllContactMessages();
      console.log('Loaded messages count:', messages.length);

      allMessages = messages;
      filteredMessages = [...messages];

      renderMessages();
      updateMessageCounts();

      hideLoading();
    } catch (error) {
      console.error('Failed to load messages:', error);
      hideLoading();
      showToast('Failed to load messages', 'error');
    }
  }

  function renderMessages() {
    const messagesContainer = document.getElementById('messages-container');
    
    if (!messagesContainer) {
      console.error('Messages container element not found!');
      return;
    }
    
    if (!filteredMessages || filteredMessages.length === 0) {
      messagesContainer.innerHTML = `
        <div class="text-center py-12">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No messages found</h3>
          <p class="text-gray-500 dark:text-gray-400">When users submit the contact form, their messages will appear here.</p>
        </div>
      `;
      return;
    }
    
    messagesContainer.innerHTML = filteredMessages.map(message => `
      <div 
        class="message-item p-6 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 ${!message.is_read ? 'bg-blue-50 dark:bg-blue-900/10' : ''}"
        data-id="${message.id}"
        data-name="${message.name}"
        data-email="${message.email}"
        data-subject="${message.subject}"
        data-message="${message.message.replace(/"/g, '&quot;')}"
        data-created="${message.created_at}"
        data-read="${message.is_read}"
      >
        <div class="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
          <div class="flex-1">
            <div class="flex items-center gap-3 mb-2">
              ${!message.is_read ? `
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                  New
                </span>
              ` : ''}
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
                ${message.subject}
              </h4>
            </div>
            <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3">
              <span class="font-medium text-gray-900 dark:text-white">${message.name}</span>
              <span class="mx-2">•</span>
              <a href="mailto:${message.email}" class="text-blue-600 dark:text-blue-400 hover:underline">
                ${message.email}
              </a>
              <span class="mx-2">•</span>
              <span title="${new Date(message.created_at).toLocaleString()}">
                ${new Date(message.created_at).toLocaleDateString()} at ${new Date(message.created_at).toLocaleTimeString()}
              </span>
            </div>
            <p class="text-gray-700 dark:text-gray-300 line-clamp-2">
              ${message.message}
            </p>
          </div>
          <div class="flex flex-row md:flex-col items-center md:items-end gap-3 mt-4 md:mt-0">
            <button
              class="mark-read-btn inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200"
              data-id="${message.id}"
              ${message.is_read ? 'style="display: none;"' : ''}
            >
              <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              Mark as Read
            </button>
            <button
              class="reply-btn inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200"
              data-email="${message.email}"
            >
              <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
              Reply
            </button>
            <button
              class="delete-btn inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-red-600 hover:bg-red-700 transition-colors duration-200"
              data-id="${message.id}"
            >
              <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
              </svg>
              Delete
            </button>
          </div>
        </div>
      </div>
    `).join('');

    // Add event listeners to the newly created elements
    setupMessageItemListeners();
  }

  function updateMessageCounts() {
    const messagesCount = document.getElementById('messages-count');
    const unreadCount = document.getElementById('unread-count');
    
    if (messagesCount) {
      messagesCount.textContent = filteredMessages.length;
    }
    
    if (unreadCount) {
      const unreadMessages = filteredMessages.filter(message => !message.is_read);
      unreadCount.textContent = unreadMessages.length;
    }
  }

  function setupEventListeners() {
    // Logout button
    document.getElementById('logout-btn')?.addEventListener('click', async function() {
      try {
        await signOut();
        window.location.href = '/admin/login';
      } catch (error) {
        console.error('Logout failed:', error);
      }
    });

    // Refresh button
    document.getElementById('refresh-btn')?.addEventListener('click', function() {
      loadMessages();
    });

    // Mark all as read button
    document.getElementById('mark-all-read-btn')?.addEventListener('click', async function() {
      const unreadMessages = filteredMessages.filter(message => !message.is_read);
      
      if (unreadMessages.length === 0) {
        showToast('No unread messages to mark as read');
        return;
      }
      
      showLoading();
      
      try {
        for (const message of unreadMessages) {
          await markMessageAsRead(message.id);
        }
        
        showToast(`Marked ${unreadMessages.length} messages as read`);
        loadMessages();
      } catch (error) {
        console.error('Error marking all messages as read:', error);
        showToast('Failed to mark all messages as read', 'error');
        hideLoading();
      }
    });

    // Search functionality
    document.getElementById('search-messages')?.addEventListener('input', function() {
      filterMessages();
    });

    // Status filter
    document.getElementById('status-filter')?.addEventListener('change', function() {
      filterMessages();
    });

    // Subject filter
    document.getElementById('subject-filter')?.addEventListener('change', function() {
      filterMessages();
    });

    // Message detail modal
    document.getElementById('close-modal')?.addEventListener('click', function() {
      hideMessageDetailModal();
    });

    // Modal mark as read button
    document.getElementById('modal-mark-read')?.addEventListener('click', async function() {
      const messageId = this.getAttribute('data-id');
      if (!messageId) return;
      
      await handleMarkAsRead(messageId);
      hideMessageDetailModal();
    });

    // Modal reply button
    document.getElementById('modal-reply')?.addEventListener('click', function() {
      const email = this.getAttribute('data-email');
      if (!email) return;
      
      window.open(`mailto:${email}`, '_blank');
    });

    // Modal delete button
    document.getElementById('modal-delete')?.addEventListener('click', function() {
      const messageId = this.getAttribute('data-id');
      if (!messageId) return;
      
      confirmDelete(messageId);
      hideMessageDetailModal();
    });

    // Delete confirmation modal
    document.getElementById('cancel-delete')?.addEventListener('click', function() {
      hideDeleteModal();
    });

    document.getElementById('confirm-delete')?.addEventListener('click', function() {
      performDelete();
    });

    // Setup message item listeners
    setupMessageItemListeners();
  }

  function setupMessageItemListeners() {
    // Message item click
    document.querySelectorAll('.message-item').forEach(item => {
      item.addEventListener('click', function(e) {
        // Ignore clicks on buttons
        if (e.target.closest('button')) return;
        
        const messageId = this.getAttribute('data-id');
        const name = this.getAttribute('data-name');
        const email = this.getAttribute('data-email');
        const subject = this.getAttribute('data-subject');
        const message = this.getAttribute('data-message');
        const created = this.getAttribute('data-created');
        const isRead = this.getAttribute('data-read') === 'true';
        
        showMessageDetailModal(messageId, name, email, subject, message, created, isRead);
      });
    });

    // Mark as read buttons
    document.querySelectorAll('.mark-read-btn').forEach(button => {
      button.addEventListener('click', async function(e) {
        e.stopPropagation();
        
        const messageId = this.getAttribute('data-id');
        if (!messageId) return;
        
        await handleMarkAsRead(messageId);
      });
    });

    // Reply buttons
    document.querySelectorAll('.reply-btn').forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation();
        
        const email = this.getAttribute('data-email');
        if (!email) return;
        
        window.open(`mailto:${email}`, '_blank');
      });
    });

    // Delete buttons
    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation();
        
        const messageId = this.getAttribute('data-id');
        if (!messageId) return;
        
        confirmDelete(messageId);
      });
    });
  }

  function filterMessages() {
    const searchTerm = document.getElementById('search-messages')?.value.toLowerCase() || '';
    const statusFilter = document.getElementById('status-filter')?.value || '';
    const subjectFilter = document.getElementById('subject-filter')?.value || '';
    
    filteredMessages = allMessages.filter(message => {
      const matchesSearch = !searchTerm || 
        message.name.toLowerCase().includes(searchTerm) ||
        message.email.toLowerCase().includes(searchTerm) ||
        message.subject.toLowerCase().includes(searchTerm) ||
        message.message.toLowerCase().includes(searchTerm);
      
      const matchesStatus = !statusFilter || 
        (statusFilter === 'read' && message.is_read) ||
        (statusFilter === 'unread' && !message.is_read);
      
      const matchesSubject = !subjectFilter || message.subject === subjectFilter;
      
      return matchesSearch && matchesStatus && matchesSubject;
    });
    
    renderMessages();
    updateMessageCounts();
  }

  async function handleMarkAsRead(messageId) {
    try {
      showLoading();
      
      const result = await markMessageAsRead(messageId);
      
      if (result.success) {
        // Update the message in the arrays
        const messageIndex = allMessages.findIndex(m => m.id === messageId);
        if (messageIndex !== -1) {
          allMessages[messageIndex].is_read = true;
        }
        
        const filteredIndex = filteredMessages.findIndex(m => m.id === messageId);
        if (filteredIndex !== -1) {
          filteredMessages[filteredIndex].is_read = true;
        }
        
        // Update the UI
        const messageItem = document.querySelector(`.message-item[data-id="${messageId}"]`);
        if (messageItem) {
          messageItem.classList.remove('bg-blue-50', 'dark:bg-blue-900/10');
          messageItem.setAttribute('data-read', 'true');
          
          const newBadge = messageItem.querySelector('.inline-flex.bg-blue-100');
          if (newBadge) {
            newBadge.remove();
          }
          
          const markReadBtn = messageItem.querySelector('.mark-read-btn');
          if (markReadBtn) {
            markReadBtn.style.display = 'none';
          }
        }
        
        updateMessageCounts();
        showToast('Message marked as read');
      } else {
        showToast(result.error || 'Failed to mark message as read', 'error');
      }
      
      hideLoading();
    } catch (error) {
      console.error('Error marking message as read:', error);
      showToast('An unexpected error occurred', 'error');
      hideLoading();
    }
  }

  function showMessageDetailModal(id, name, email, subject, message, created, isRead) {
    const modal = document.getElementById('message-detail-modal');
    const modalSubject = document.getElementById('modal-subject');
    const modalName = document.getElementById('modal-name');
    const modalEmail = document.getElementById('modal-email');
    const modalDate = document.getElementById('modal-date');
    const modalMessage = document.getElementById('modal-message');
    const modalMarkRead = document.getElementById('modal-mark-read');
    const modalReply = document.getElementById('modal-reply');
    const modalDelete = document.getElementById('modal-delete');
    
    if (!modal || !modalSubject || !modalName || !modalEmail || !modalDate || !modalMessage || !modalMarkRead || !modalReply || !modalDelete) {
      console.error('Modal elements not found');
      return;
    }
    
    // Set modal content
    modalSubject.textContent = subject;
    modalName.textContent = name;
    modalEmail.textContent = email;
    modalEmail.href = `mailto:${email}`;
    modalDate.textContent = `${new Date(created).toLocaleDateString()} at ${new Date(created).toLocaleTimeString()}`;
    modalMessage.textContent = message;
    
    // Set button data attributes
    modalMarkRead.setAttribute('data-id', id);
    modalReply.setAttribute('data-email', email);
    modalDelete.setAttribute('data-id', id);
    
    // Show/hide mark as read button based on read status
    if (isRead) {
      modalMarkRead.style.display = 'none';
    } else {
      modalMarkRead.style.display = 'inline-flex';
    }
    
    // Show modal
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    
    // Mark as read if not already read
    if (!isRead) {
      handleMarkAsRead(id);
    }
  }

  function hideMessageDetailModal() {
    const modal = document.getElementById('message-detail-modal');
    if (!modal) return;
    
    modal.classList.add('hidden');
    modal.classList.remove('flex');
  }

  function confirmDelete(id) {
    messageToDelete = id;
    showDeleteModal();
  }

  function showDeleteModal() {
    const modal = document.getElementById('delete-modal');
    if (!modal) return;
    
    modal.classList.remove('hidden');
    modal.classList.add('flex');
  }

  function hideDeleteModal() {
    const modal = document.getElementById('delete-modal');
    if (!modal) return;
    
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    messageToDelete = null;
  }

  async function performDelete() {
    if (!messageToDelete) return;
    if (deleteInProgress) return;

    const idToDelete = messageToDelete;
    
    try {
      deleteInProgress = true;
      showLoading();
      hideDeleteModal();

      const result = await deleteContactMessage(idToDelete);

      if (result.success) {
        // Remove the deleted message from the arrays
        allMessages = allMessages.filter(message => message.id !== idToDelete);
        filteredMessages = filteredMessages.filter(message => message.id !== idToDelete);
        
        // Update the UI
        renderMessages();
        updateMessageCounts();
        
        showToast('Message deleted successfully');
      } else {
        showToast(result.error || 'Failed to delete message', 'error');
      }
      
      hideLoading();
      messageToDelete = null;
      deleteInProgress = false;
    } catch (error) {
      hideLoading();
      deleteInProgress = false;
      messageToDelete = null;
      showToast('An unexpected error occurred', 'error');
      console.error('Delete error:', error);
    }
  }

  function showLoading() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (!loadingOverlay) return;
    
    loadingOverlay.classList.remove('hidden');
    loadingOverlay.classList.add('flex');
  }

  function hideLoading() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (!loadingOverlay) return;
    
    loadingOverlay.classList.add('hidden');
    loadingOverlay.classList.remove('flex');
  }

  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    
    if (!toast || !toastMessage) return;
    
    toastMessage.textContent = message;
    
    // Update toast styling based on type
    if (type === 'error') {
      toast.className = toast.className.replace('bg-green-600', 'bg-red-600');
    } else {
      toast.className = toast.className.replace('bg-red-600', 'bg-green-600');
    }
    
    toast.classList.remove('translate-y-full');
    toast.classList.add('translate-y-0');
    
    setTimeout(() => {
      toast.classList.remove('translate-y-0');
      toast.classList.add('translate-y-full');
    }, 3000);
  }
</script>

<style>
  /* Line clamp for message preview */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Ensure minimum touch target sizes */
  button, a {
    min-width: 44px;
    min-height: 44px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Improved focus styles */
  button:focus, a:focus, input:focus, select:focus, textarea:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
</style>