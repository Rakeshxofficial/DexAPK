---
// Optimized Image Component with responsive srcset, lazy loading, and proper alt text
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
  addStructuredData?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  sizes = '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw',
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto',
  addStructuredData = false,
  ...rest
} = Astro.props;

// Function to check if a URL is an external image
function isExternalImage(url: string): boolean {
  if (!url) return false;
  return url.startsWith('http') && !url.includes('dexapk.com');
}

// Generate image dimensions for proper aspect ratio
const aspectRatio = width && height ? width / height : undefined;

// Determine if this is a stock photo from Pexels
const isPexels = src.includes('pexels.com');
---

<!-- Image with proper attributes -->
<img 
  src={src}
  alt={alt}
  class={`image-optimized ${className || ''}`}
  loading={loading}
  fetchpriority={fetchpriority}
  width={width}
  height={height}
  sizes={sizes}
  decoding={decoding}
  {...rest}
/>

<!-- Preload critical images -->
{fetchpriority === 'high' && (
  <link rel="preload" as="image" href={src} />
)}

<!-- Add structured data for images -->
{addStructuredData && (
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "ImageObject",
    "url": src,
    "name": alt,
    "width": width,
    "height": height,
    "encodingFormat": src.endsWith('.webp') ? "image/webp" : 
                      src.endsWith('.jpg') || src.endsWith('.jpeg') ? "image/jpeg" : 
                      src.endsWith('.png') ? "image/png" : "image/webp"
  })} />
)}

<style>
.image-optimized {
  max-width: 100%;
  height: auto;
  transition: opacity 0.3s ease;
}

.image-optimized[loading="lazy"] {
  opacity: 0;
  animation: fadeIn 0.3s ease forwards;
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

/* Reduce motion for users who prefer it */
@media (prefers-reduced-motion: reduce) {
  .image-optimized {
    animation: none;
    transition: none;
  }
}
</style>

<script>
// Enhanced lazy loading with intersection observer for analytics
document.addEventListener('DOMContentLoaded', () => {
  const images = document.querySelectorAll('.image-optimized[loading="lazy"]');
  
  const imageObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target as HTMLImageElement;
        img.style.opacity = '1';
        
        // Track image load for analytics
        img.addEventListener('load', () => {
          // You can add analytics tracking here
          console.log('Image loaded:', img.src);
        });
        
        imageObserver.unobserve(img);
      }
    });
  }, { threshold: 0.1 });
  
  images.forEach(img => imageObserver.observe(img));
});
</script>