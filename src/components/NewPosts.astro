---
// New Posts Component - Shows latest apps
import ImageOptimized from './ImageOptimized.astro';
import { getAllApps } from '../lib/supabase.js';

export interface Props {
  maxApps?: number;
  showHeading?: boolean;
  headingText?: string;
  currentSlug?: string;
}

const { 
  maxApps = 5,
  showHeading = true,
  headingText = "New Posts",
  currentSlug = ''
} = Astro.props;

// Get latest apps
let latestApps = [];
try {
  const allApps = await getAllApps();
  
  // Sort by created date (newest first) and limit to maxApps
  latestApps = allApps
    .filter(app => app.slug !== currentSlug) // Exclude current app
    .sort((a, b) => new Date(b.created_at || b.updated_at) - new Date(a.created_at || a.updated_at))
    .slice(0, maxApps);
    
} catch (error) {
  console.error('Error loading latest apps:', error);
  latestApps = [];
}

// Function to format date
function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}

// Function to get time ago
function getTimeAgo(dateString: string): string {
  const now = new Date();
  const date = new Date(dateString);
  const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
  
  if (diffInHours < 1) return 'Just now';
  if (diffInHours < 24) return `${diffInHours}h ago`;
  if (diffInHours < 48) return 'Yesterday';
  if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;
  return formatDate(dateString);
}
---

{latestApps.length > 0 && (
  <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700">
    {showHeading && (
      <div class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
        <svg class="w-5 h-5 mr-2 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        {headingText}
      </div>
    )}
    
    <div class="space-y-4">
      {latestApps.map((app, index) => (
        <article class="group">
          <a href={`/${app.slug}`} class="flex items-start p-3 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
            
            <!-- App Icon -->
            <div class="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-xl flex items-center justify-center mr-4 flex-shrink-0 overflow-hidden">
              {app.icon ? (
                <ImageOptimized 
                  src={app.icon} 
                  alt={`${app.name} icon`}
                  class="w-full h-full object-cover rounded-xl group-hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                  width={64}
                  height={64}
                  isOffScreen={index > 2}
                />
              ) : (
                <div class="w-full h-full bg-gradient-to-br from-green-500 to-blue-600 rounded-xl flex items-center justify-center">
                  <svg class="w-8 h-8 text-white/70" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                  </svg>
                </div>
              )}
            </div>
            
            <!-- App Content -->
            <div class="flex-1 min-w-0">
              <div class="flex items-center gap-2 mb-1">
                <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                  {app.category}
                </span>
                {app.is_featured && (
                  <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                    Featured
                  </span>
                )}
                {index < 3 && (
                  <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    New
                  </span>
                )}
              </div>
              
              <h4 class="text-sm font-medium text-gray-900 dark:text-white line-clamp-2 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors duration-200 mb-1 leading-tight">
                {app.name} v{app.version}
              </h4>
              
              <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1 text-xs text-gray-500 dark:text-gray-400">
                <div class="flex items-center gap-2 min-w-0">
                  <time datetime={app.created_at || app.updated_at}>{getTimeAgo(app.created_at || app.updated_at)}</time>
                  <span>â€¢</span>
                  <div class="flex items-center gap-1">
                    <svg class="w-3 h-3 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                    <span class="whitespace-nowrap">{app.rating}</span>
                  </div>
                </div>
                <span class="text-xs text-gray-400 dark:text-gray-500 truncate">{app.size}</span>
              </div>
              
              {app.description && (
                <p class="text-xs text-gray-600 dark:text-gray-400 mt-1 line-clamp-2 leading-relaxed">
                  {app.description.substring(0, 80)}...
                </p>
              )}
            </div>
            
            <!-- Arrow Icon -->
            <svg class="w-4 h-4 text-gray-400 group-hover:text-green-500 dark:group-hover:text-green-400 group-hover:translate-x-1 transition-all duration-200 flex-shrink-0 ml-1 sm:ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
            </svg>
          </a>
        </article>
      ))}
      
      <!-- View All Apps Link -->
      <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
        <a 
          href="/apps" 
          class="flex items-center justify-center w-full p-3 text-sm font-medium text-green-600 dark:text-green-400 hover:text-green-800 dark:hover:text-green-300 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-xl transition-colors duration-200"
        >
          <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"/>
          </svg>
          View All Latest Apps
          <svg class="w-4 h-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
          </svg>
        </a>
      </div>
    </div>
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    word-break: break-word;
    hyphens: auto;
  }
  
  /* Ensure minimum touch target sizes */
  a, button {
    min-width: 44px;
    min-height: 44px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Improved focus styles */
  a:focus, button:focus {
    outline: 2px solid #10b981;
    outline-offset: 2px;
  }
  
  /* Ensure proper text wrapping and overflow handling */
  .app-content {
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  /* Mobile-specific adjustments */
  @media (max-width: 640px) {
    .line-clamp-2 {
      -webkit-line-clamp: 1;
      line-height: 1.3;
    }
    
    /* Ensure badges don't overflow */
    .badge-container {
      flex-wrap: wrap;
      gap: 0.25rem;
    }
    
    /* Adjust spacing for mobile */
    .app-item {
      padding: 0.75rem;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
</style>