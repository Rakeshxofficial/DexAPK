---
// App versions manager component for adding and managing app versions
export interface Props {
  app: any;
}

const { app } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-700 p-8 mt-8">
  <div class="flex items-center justify-between mb-8">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
      Manage App Versions
    </h2>
    <button
      id="add-version-btn"
      class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200"
    >
      <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
      Add New Version
    </button>
  </div>

  <!-- Versions Table -->
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
      <thead class="bg-gray-50 dark:bg-gray-700">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Version</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Size</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">MOD Info</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Release Date</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
        </tr>
      </thead>
      <tbody id="versions-table" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
        <tr>
          <td colspan="6" class="px-6 py-8 text-center text-gray-500 dark:text-gray-400">
            <div class="animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
            <p>Loading versions...</p>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- No Versions Message -->
  <div id="no-versions-message" class="hidden text-center py-8">
    <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
    </svg>
    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No versions found</h3>
    <p class="text-gray-500 dark:text-gray-400 mb-4">Add a new version to get started</p>
    <button
      id="add-first-version-btn"
      class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200"
    >
      <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
      Add First Version
    </button>
  </div>
</div>

<!-- Version Form Modal -->
<div id="version-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
  <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-2xl w-full mx-4">
    <div class="flex items-center justify-between mb-6">
      <h3 class="text-xl font-bold text-gray-900 dark:text-white" id="modal-title">Add New Version</h3>
      <button
        id="close-modal"
        class="inline-flex items-center justify-center p-2 rounded-lg text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200"
      >
        <span class="sr-only">Close modal</span>
        <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
    
    <form id="version-form" class="space-y-6">
      <input type="hidden" id="version-id" name="id" value="">
      <input type="hidden" id="app-id" name="app_id" value={app.id}>
      
      <!-- Version -->
      <div>
        <label for="version" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Version *
        </label>
        <input
          type="text"
          id="version"
          name="version"
          required
          class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
          placeholder="v1.0.0"
        />
      </div>
      
      <!-- Size -->
      <div>
        <label for="size" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Size *
        </label>
        <input
          type="text"
          id="size"
          name="size"
          required
          class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
          placeholder="25.5 MB"
        />
      </div>
      
      <!-- MOD Info -->
      <div>
        <label for="mod_info" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          MOD Info *
        </label>
        <input
          type="text"
          id="mod_info"
          name="mod_info"
          required
          class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
          placeholder="Premium Unlocked"
        />
      </div>
      
      <!-- Download URL -->
      <div>
        <label for="download_url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Download URL *
        </label>
        <input
          type="url"
          id="download_url"
          name="download_url"
          required
          class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
          placeholder="https://example.com/download/app-v1.0.0.apk"
        />
      </div>
      
      <!-- Release Date -->
      <div>
        <label for="release_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Release Date *
        </label>
        <input
          type="date"
          id="release_date"
          name="release_date"
          required
          class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
          value={new Date().toISOString().split('T')[0]}
        />
      </div>
      
      <!-- Active Status -->
      <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-xl">
        <div>
          <label for="is_active" class="text-sm font-medium text-gray-700 dark:text-gray-300">
            Active Status
          </label>
          <p class="text-xs text-gray-500 dark:text-gray-400">
            Enable this version for use
          </p>
        </div>
        <label class="relative inline-flex items-center cursor-pointer">
          <input
            type="checkbox"
            id="is_active"
            name="is_active"
            checked
            class="sr-only peer"
          />
          <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-600 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
        </label>
      </div>
      
      <!-- Form Buttons -->
      <div class="flex items-center justify-end space-x-4 pt-4">
        <button
          type="button"
          id="cancel-version"
          class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
        >
          Cancel
        </button>
        <button
          type="submit"
          id="save-version"
          class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
        >
          Save Version
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
  <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md mx-4">
    <div class="text-center">
      <div class="w-16 h-16 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-red-600 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Delete Version</h3>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        Are you sure you want to delete this version? This action cannot be undone.
      </p>
      <div class="flex items-center justify-center space-x-4">
        <button
          id="cancel-delete"
          type="button"
          class="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
        >
          Cancel
        </button>
        <button
          id="confirm-delete"
          type="button"
          class="px-6 py-3 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors duration-200"
        >
          Delete Version
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
  <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-sm mx-4 text-center">
    <div class="animate-spin w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Processing...</h3>
    <p class="text-gray-600 dark:text-gray-400">Please wait while we process your request.</p>
  </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="fixed bottom-4 right-4 bg-green-600 text-white px-6 py-4 rounded-xl shadow-lg transform translate-y-full transition-transform duration-300 z-50">
  <div class="flex items-center gap-3">
    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
    </svg>
    <span id="toast-message">Action completed successfully!</span>
  </div>
</div>

<script>
  import { getAppVersions, createAppVersion, updateAppVersion, deleteAppVersion } from '../../lib/supabase.js';

  // Global variables
  let versionToDelete = null;
  let isEditMode = false;

  document.addEventListener('DOMContentLoaded', function() {
    const appId = document.getElementById('app-id')?.value;
    
    // Load versions
    loadVersions(appId);
    
    // Set up event listeners
    setupEventListeners();
  });

  async function loadVersions(appId) {
    if (!appId) {
      console.error('App ID not found');
      return;
    }
    
    try {
      showLoading();
      
      const versions = await getAppVersions(appId);
      console.log('Loaded versions:', versions);
      
      const versionsTable = document.getElementById('versions-table');
      const noVersionsMessage = document.getElementById('no-versions-message');
      
      if (!versions || versions.length === 0) {
        if (versionsTable) versionsTable.innerHTML = '';
        if (noVersionsMessage) noVersionsMessage.classList.remove('hidden');
        hideLoading();
        return;
      }
      
      if (noVersionsMessage) noVersionsMessage.classList.add('hidden');
      
      if (versionsTable) {
        versionsTable.innerHTML = versions.map(version => `
          <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900 dark:text-white">${version.version}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-500 dark:text-gray-400">${version.size}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-500 dark:text-gray-400">${version.mod_info}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-500 dark:text-gray-400">${new Date(version.release_date).toLocaleDateString()}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${version.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'}">
                ${version.is_active ? 'Active' : 'Inactive'}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <div class="flex items-center space-x-3">
                <button
                  type="button"
                  class="edit-version-btn text-blue-600 dark:text-blue-400 hover:text-blue-900 dark:hover:text-blue-300 transition-colors duration-200"
                  data-id="${version.id}"
                  data-version="${version.version}"
                  data-size="${version.size}"
                  data-mod-info="${version.mod_info || ''}"
                  data-download-url="${version.download_url || ''}"
                  data-release-date="${version.release_date ? version.release_date.substring(0, 10) : ''}"
                  data-is-active="${version.is_active}"
                >
                  Edit
                </button>
                <button
                  type="button"
                  class="delete-version-btn text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300 transition-colors duration-200"
                  data-id="${version.id}"
                  data-version="${version.version}"
                >
                  Delete
                </button>
              </div>
            </td>
          </tr>
        `).join('');
        
        // Add event listeners to the newly created buttons
        document.querySelectorAll('.edit-version-btn').forEach(btn => {
          btn.addEventListener('click', handleEditVersion);
        });
        
        document.querySelectorAll('.delete-version-btn').forEach(btn => {
          btn.addEventListener('click', handleDeleteVersion);
        });
      }
      
      hideLoading();
    } catch (error) {
      console.error('Error loading versions:', error);
      hideLoading();
      showToast('Failed to load versions', 'error');
    }
  }

  function setupEventListeners() {
    // Add version button
    document.getElementById('add-version-btn')?.addEventListener('click', () => {
      openVersionModal();
    });
    
    // Add first version button
    document.getElementById('add-first-version-btn')?.addEventListener('click', () => {
      openVersionModal();
    });
    
    // Close modal button
    document.getElementById('close-modal')?.addEventListener('click', () => {
      closeVersionModal();
    });
    
    // Cancel version button
    document.getElementById('cancel-version')?.addEventListener('click', () => {
      closeVersionModal();
    });
    
    // Version form submission
    document.getElementById('version-form')?.addEventListener('submit', handleVersionFormSubmit);
    
    // Delete confirmation modal
    document.getElementById('cancel-delete')?.addEventListener('click', () => {
      hideDeleteModal();
    });
    
    document.getElementById('confirm-delete')?.addEventListener('click', () => {
      performDelete();
    });
  }

  function openVersionModal(versionData = null) {
    const modal = document.getElementById('version-modal');
    const modalTitle = document.getElementById('modal-title');
    const form = document.getElementById('version-form');
    const versionIdInput = document.getElementById('version-id');
    
    // Reset form
    form?.reset();
    
    // Set edit mode flag
    isEditMode = !!versionData;
    
    if (versionData) {
      // Edit mode
      if (modalTitle) modalTitle.textContent = 'Edit Version';
      if (versionIdInput) versionIdInput.value = versionData.id;
      
      // Fill form with version data
     if (document.getElementById('version')) document.getElementById('version').value = versionData.version || '';
     if (document.getElementById('size')) document.getElementById('size').value = versionData.size || '';
     if (document.getElementById('mod_info')) document.getElementById('mod_info').value = versionData.modInfo || '';
     if (document.getElementById('download_url')) document.getElementById('download_url').value = versionData.downloadUrl || '';
     if (document.getElementById('release_date')) document.getElementById('release_date').value = versionData.releaseDate || new Date().toISOString().split('T')[0];
     if (document.getElementById('is_active')) document.getElementById('is_active').checked = versionData.isActive === 'true';
    } else {
      // Create mode
      if (modalTitle) modalTitle.textContent = 'Add New Version';
      if (versionIdInput) versionIdInput.value = '';
    }
    
    // Show modal
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }
  }

  function closeVersionModal() {
    const modal = document.getElementById('version-modal');
    if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    }
  }

  async function handleVersionFormSubmit(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    
    // Convert FormData to object
    const versionData = {
      app_id: formData.get('app_id'),
      version: formData.get('version'),
      size: formData.get('size'),
      mod_info: formData.get('mod_info'),
      download_url: formData.get('download_url'),
      release_date: formData.get('release_date'),
      is_active: formData.has('is_active')
    };
    
    try {
      showLoading();
      
      let result;
      if (isEditMode) {
        const versionId = formData.get('id');
        result = await updateAppVersion(versionId, versionData);
      } else {
        result = await createAppVersion(versionData);
      }
      
      if (result.success) {
        showToast(`Version ${isEditMode ? 'updated' : 'created'} successfully`);
        closeVersionModal();
        loadVersions(versionData.app_id);
      } else {
        showToast(result.error || `Failed to ${isEditMode ? 'update' : 'create'} version`, 'error');
      }
      
      hideLoading();
    } catch (error) {
      console.error('Error saving version:', error);
      hideLoading();
      showToast('An unexpected error occurred', 'error');
    }
  }

  function handleEditVersion(e) {
    const button = e.currentTarget;
    const versionId = button.getAttribute('data-id');
    
    // Validate version ID
   if (!versionId || versionId === 'null' || versionId === 'undefined' || versionId === null) {
      console.error('Invalid version ID for edit:', versionId);
      showToast('Invalid version ID. Cannot edit this version.', 'error');
      return;
    }
    
    const versionData = {
      id: versionId,
     version: button.getAttribute('data-version') || '',
     size: button.getAttribute('data-size') || '',
     modInfo: button.getAttribute('data-mod-info') || '',
     downloadUrl: button.getAttribute('data-download-url') || '',
     releaseDate: button.getAttribute('data-release-date') || new Date().toISOString().split('T')[0],
     isActive: button.getAttribute('data-is-active') || 'true'
    };
    
    openVersionModal(versionData);
  }

  function handleDeleteVersion(e) {
    const button = e.currentTarget;
    const versionId = button.getAttribute('data-id');
    
    // Validate version ID
   if (!versionId || versionId === 'null' || versionId === 'undefined' || versionId === null) {
      console.error('Invalid version ID for delete:', versionId);
      showToast('Invalid version ID. Cannot delete this version.', 'error');
      return;
    }
    
    versionToDelete = versionId;
    
    const versionName = button.getAttribute('data-version') || 'Unknown';
    const deleteVersionName = document.querySelector('#delete-modal p');
    if (deleteVersionName) {
      deleteVersionName.textContent = `Are you sure you want to delete version "${versionName}"? This action cannot be undone.`;
    }
    
    showDeleteModal();
  }

  function showDeleteModal() {
    const modal = document.getElementById('delete-modal');
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }
  }

  function hideDeleteModal() {
    const modal = document.getElementById('delete-modal');
    if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    }
    versionToDelete = null;
  }

  async function performDelete() {
    if (!versionToDelete) return;
    
    // Double-check version ID before deletion
   if (!versionToDelete || versionToDelete === 'null' || versionToDelete === 'undefined' || versionToDelete === null) {
      console.error('Attempted to delete with invalid ID:', versionToDelete);
      showToast('Invalid version ID. Cannot delete this version.', 'error');
      hideDeleteModal();
      return;
    }
    
    try {
      showLoading();
      hideDeleteModal();
      
      const appId = document.getElementById('app-id')?.value;
      const result = await deleteAppVersion(versionToDelete);
      
      if (result.success) {
        showToast('Version deleted successfully');
        loadVersions(appId);
      } else {
        showToast(result.error || 'Failed to delete version', 'error');
      }
      
      hideLoading();
      versionToDelete = null;
    } catch (error) {
      console.error('Error deleting version:', error);
      hideLoading();
      versionToDelete = null;
      showToast('An unexpected error occurred', 'error');
    }
  }

  function showLoading() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) {
      loadingOverlay.classList.remove('hidden');
      loadingOverlay.classList.add('flex');
    }
  }

  function hideLoading() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) {
      loadingOverlay.classList.add('hidden');
      loadingOverlay.classList.remove('flex');
    }
  }

  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    
    if (!toast || !toastMessage) return;
    
    toastMessage.textContent = message;
    
    // Update toast styling based on type
    if (type === 'error') {
      toast.className = toast.className.replace('bg-green-600', 'bg-red-600');
    } else {
      toast.className = toast.className.replace('bg-red-600', 'bg-green-600');
    }
    
    toast.classList.remove('translate-y-full');
    toast.classList.add('translate-y-0');
    
    setTimeout(() => {
      toast.classList.remove('translate-y-0');
      toast.classList.add('translate-y-full');
    }, 3000);
  }
</script>

<style>
  /* Ensure minimum touch target sizes */
  button, a {
    min-width: 44px;
    min-height: 44px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Improved focus styles */
  button:focus, a:focus, input:focus, select:focus, textarea:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
</style>