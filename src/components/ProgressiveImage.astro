---
// Progressive Image component with blur-up effect
export interface Props {
  src: string;
  alt: string;
  width?: string | number;
  height?: string | number;
  class?: string;
  placeholderSize?: number; // Size of the placeholder in pixels (smaller = more blur)
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = "", 
  placeholderSize = 10 
} = Astro.props;

// Generate a tiny placeholder URL (could be replaced with actual tiny image in production)
const placeholderSrc = src;

// Generate unique ID for this image
const id = `progressive-img-${Math.random().toString(36).substring(2, 11)}`;
---

<div class={`progressive-image-container ${className}`} style={`position: relative; overflow: hidden; ${width ? `width: ${width}px;` : ''} ${height ? `height: ${height}px;` : ''}`}>
  <!-- Placeholder image (blurry version) -->
  <img 
    src={placeholderSrc} 
    alt={alt}
    class="progressive-image-placeholder" 
    width={width} 
    height={height}
    aria-hidden="true"
    loading="lazy"
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; filter: blur(20px); transform: scale(1.1); opacity: 1; transition: opacity 0.3s ease-out;"
  />
  
  <!-- Main image (hidden until loaded) -->
  <img 
    id={id}
    src={src} 
    alt={alt}
    class="progressive-image-main" 
    width={width} 
    height={height}
    loading="lazy"
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; opacity: 0; transition: opacity 0.5s ease-out;"
    onload={`this.style.opacity = 1; this.previousElementSibling.style.opacity = 0;`}
  />
  
  <!-- Fallback for no-JS environments -->
  <noscript>
    <img 
      src={src} 
      alt={alt}
      width={width} 
      height={height}
      style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;"
    />
  </noscript>
</div>

<style>
  /* Ensure the container has proper dimensions */
  .progressive-image-container {
    position: relative;
    overflow: hidden;
    background-color: #f0f0f0;
    width: 100%;
    height: 100%;
  }

  /* Reduced motion preference support */
  @media (prefers-reduced-motion: reduce) {
    .progressive-image-placeholder,
    .progressive-image-main {
      transition: none !important;
    }
  }
</style>

<script define:vars={{ id }}>
  // This script handles the image loading and transition
  document.addEventListener('DOMContentLoaded', function() {
    const img = document.getElementById(id);
    const placeholder = img?.previousElementSibling;
    
    if (img && placeholder) {
      // If image is already cached, show it immediately
      if (img.complete) {
        img.style.opacity = '1';
        placeholder.style.opacity = '0';
      }
      
      // Add error handling
      img.addEventListener('error', function() {
        // On error, show a broken image placeholder and hide the blurry one
        placeholder.style.opacity = '0';
        img.style.opacity = '1';
        img.style.objectFit = 'contain';
        img.src = 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"%3E%3Crect x="3" y="3" width="18" height="18" rx="2" ry="2"%3E%3C/rect%3E%3Ccircle cx="8.5" cy="8.5" r="1.5"%3E%3C/circle%3E%3Cpolyline points="21 15 16 10 5 21"%3E%3C/polyline%3E%3C/svg%3E';
        
        // Announce to screen readers
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('class', 'sr-only');
        announcement.textContent = `Image ${alt} failed to load`;
        document.body.appendChild(announcement);
        setTimeout(() => document.body.removeChild(announcement), 1000);
      });
    }
  });
</script>