---
// Markdown renderer component with automatic Table of Contents generation
interface Props {
  content: string;
  generateToc?: boolean;
}

const { content, generateToc = true } = Astro.props;

// Simple markdown parser for headings and basic formatting
function parseMarkdown(markdown: string) {
  if (!markdown) return { html: '', toc: [] };
  
  const lines = markdown.split('\n');
  const toc = [];
  let html = '';
  let inCodeBlock = false;
  let inList = false;
  let listType = '';
  let inTable = false;
  
  for (let i = 0; i < lines.length; i++) {
    let line = lines[i];
    
    // Handle code blocks
    if (line.startsWith('```')) {
      inCodeBlock = !inCodeBlock;
      if (inCodeBlock) {
        const language = line.slice(3).trim();
        html += `<pre class="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 overflow-x-auto my-4"><code class="language-${language}">`;
      } else {
        html += '</code></pre>';
      }
      continue;
    }
    
    if (inCodeBlock) {
      html += escapeHtml(line) + '\n';
      continue;
    }
    
    // Handle headings
    const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
    if (headingMatch) {
      const level = headingMatch[1].length;
      const text = formatInlineMarkdown(headingMatch[2]);
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
      
      if (generateToc) {
        // For TOC, use plain text without HTML tags
        const plainText = headingMatch[2].replace(/\*\*(.*?)\*\*/g, '$1').replace(/\*(.*?)\*/g, '$1').replace(/`(.*?)`/g, '$1');
        toc.push({ level, text: plainText, id });
      }
      
      html += `<h${level} id="${id}" class="text-${level === 1 ? '3xl' : level === 2 ? '2xl' : level === 3 ? 'xl' : 'lg'} font-bold text-gray-900 dark:text-white mb-4 mt-8">${text}</h${level}>`;
      continue;
    }
    
    // Handle horizontal rules
    if (line.match(/^---+$/)) {
      html += '<hr class="border-gray-200 dark:border-gray-700 my-8">';
      continue;
    }
    
    // Handle lists
    const listMatch = line.match(/^(\s*)([-*+]|\d+\.)\s+(.+)$/);
    if (listMatch) {
      const indent = listMatch[1].length;
      const marker = listMatch[2];
      const text = listMatch[3];
      const isOrdered = /^\d+\./.test(marker);
      
      if (!inList) {
        inList = true;
        listType = isOrdered ? 'ol' : 'ul';
        html += `<${listType} class="${listType === 'ol' ? 'list-decimal' : 'list-disc'} list-inside space-y-2 my-4 text-gray-700 dark:text-gray-300">`;
      }
      
      html += `<li class="ml-${Math.floor(indent / 2) * 4}">${formatInlineMarkdown(text)}</li>`;
      continue;
    } else if (inList) {
      inList = false;
      html += `</${listType}>`;
    }
    
    // Handle blockquotes
    if (line.startsWith('> ')) {
      html += `<blockquote class="border-l-4 border-blue-500 pl-4 italic text-gray-600 dark:text-gray-400 my-4">${formatInlineMarkdown(line.slice(2))}</blockquote>`;
      continue;
    }
    
    // Handle tables
    if (line.includes('|')) {
      const cells = line.split('|').map(cell => cell.trim()).filter(Boolean);
      
      // Skip empty table rows
      if (cells.length === 0) {
        continue;
      }
      
      if (cells.length >= 1) {
        // Check if next line is table separator
        const nextLine = lines[i + 1];
        
        if (!inTable && nextLine && nextLine.includes('|') && nextLine.includes('---')) {
          // Table header
          inTable = true;
          html += '<div class="overflow-x-auto my-6"><table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700"><thead class="bg-gray-50 dark:bg-gray-800"><tr>';
          cells.forEach(cell => {
            html += `<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">${formatInlineMarkdown(cell)}</th>`;
          });
          html += '</tr></thead><tbody class="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">';
          i++; // Skip separator line
          continue;
        } else if (inTable) {
          // Table row within an existing table
          html += '<tr>';
          cells.forEach(cell => {
            html += `<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">${formatInlineMarkdown(cell)}</td>`;
          });
          html += '</tr>';
          continue;
        }
      }
    }
    
    if (inTable && !line.includes('|')) {
      html += '</tbody></table></div>';
      inTable = false;
    }
    
    // Handle paragraphs
    if (line.trim()) {
      html += `<p class="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">${formatInlineMarkdown(line)}</p>`;
    } else {
      html += '<br>';
    }
  }
  
  // Close any open lists or tables
  if (inList) {
    html += `</${listType}>`;
  }
  if (inTable) {
    html += '</tbody></table></div>';
  }
  
  return { html, toc };
}

// Helper function to format inline markdown
function formatInlineMarkdown(text: string): string {
  return text
    // Bold
    .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900 dark:text-white">$1</strong>')
    // Italic
    .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')
    // Code
    .replace(/`(.*?)`/g, '<code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono">$1</code>')
    // Links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, function(match, text, url) {
      if (url.startsWith('/') || url.startsWith('#') || url.includes('dexapk.com')) {
        return `<a href="${url}" class="text-blue-600 dark:text-blue-400 hover:underline">${text}</a>`;
      } else {
        return `<a href="${url}" class="text-blue-600 dark:text-blue-400 hover:underline" target="_blank" rel="noopener noreferrer">${text}</a>`;
      }
    })
    // Strikethrough
    .replace(/~~(.*?)~~/g, '<del class="line-through">$1</del>');
}

// Helper function to escape HTML
function escapeHtml(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

// Parse the markdown content
const { html, toc } = parseMarkdown(content);
---

<!-- Table of Contents (if enabled and has headings) -->
{generateToc && toc.length > 0 && (
  <details class="bg-gray-50 dark:bg-gray-700 rounded-xl p-4 mb-8 border border-gray-200 dark:border-gray-600">
    <summary class="flex items-center justify-between cursor-pointer font-semibold text-gray-900 dark:text-white p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
        </svg>
        Table of Contents
      </div>
      <svg class="w-5 h-5 transform transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
      </svg>
    </summary>
    
    <nav class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600" aria-label="Table of contents">
      <ul class="space-y-2">
        {toc.map((item, index) => (
          <li class={`ml-${(item.level - 1) * 4}`}>
            <a 
              href={`#${item.id}`}
              class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline transition-colors duration-200 text-sm block py-1"
            >
              {item.level <= 2 && <span class="font-medium">{index + 1}. </span>}
              {item.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </details>
)}

<!-- Article Content -->
<div class="prose prose-gray dark:prose-invert max-w-none">
  <div set:html={html} />
</div>

<style>
  /* Enhanced prose styles */
  .prose {
    line-height: 1.6;
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    scroll-margin-top: 2rem;
  }
  
  /* Increase scroll margin to prevent headings from being hidden under the header */
  .prose h1, .prose h2, .prose h3 {
    scroll-margin-top: 8rem;
  }
  
  /* Add scroll margin to heading IDs for TOC links */
  h1[id], h2[id], h3[id], h4[id], h5[id], h6[id] {
    scroll-margin-top: 8rem;
  }
  
  .prose pre {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
  }
  
  .dark .prose pre {
    background: #1f2937;
    border: 1px solid #374151;
  }
  
  .prose table {
    border-collapse: collapse;
    margin: 1.5rem 0;
  }
  
  .prose th, .prose td {
    border: 1px solid #e5e7eb;
  }
  
  .dark .prose th, .dark .prose td {
    border-color: #374151;
  }
  
  /* Table of Contents collapsible styles */
  details summary {
    list-style: none;
  }
  
  details summary::-webkit-details-marker {
    display: none;
  }
  
  details[open] summary {
    border-bottom: 1px solid #e5e7eb;
  }
  
  .dark details[open] summary {
    border-bottom-color: #374151;
  }
  
  /* Smooth animation for the chevron */
  details summary svg {
    transition: transform 0.2s ease-in-out;
  }
  
  details[open] summary svg {
    transform: rotate(180deg);
  }
  
  /* Hover effect for the summary */
  details summary:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  .dark details summary:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }
  
  /* Focus styles for accessibility */
  details summary:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Smooth scrolling for anchor links */
  @media (prefers-reduced-motion: no-preference) {
    html {
      scroll-behavior: smooth;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    details summary svg,
    * {
      transition: none !important;
    }
  }
</style>

<script>
  // Add click handlers for table of contents
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('nav a[href^="#"]');
    
    tocLinks.forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        const targetId = e.currentTarget.getAttribute('href').slice(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          // Get the header height to offset the scroll position
          const headerHeight = document.querySelector('header')?.offsetHeight || 100;
          
          // Use requestAnimationFrame to avoid forced reflow
          window.requestAnimationFrame(() => {
            const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;
            const scrollOffset = headerHeight + 40; // Add extra padding
            
            // Scroll to element with offset for the header
            window.scrollTo({
              top: targetPosition - scrollOffset,
              behavior: 'smooth'
            });
            
            // Update URL without triggering page reload
            history.pushState(null, null, `#${targetId}`);
            
            // Announce to screen readers
            announceToScreenReader(`Navigated to ${targetId.replace(/-/g, ' ')} section`);
          });
        }
      }, { passive: false });
    });
    
    // Function for screen reader announcements
    function announceToScreenReader(message) {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
    
    // Add keyboard support for details element
    const detailsElements = document.querySelectorAll('details');
    detailsElements.forEach(details => {
      const summary = details.querySelector('summary');
      if (summary) {
        summary.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            details.open = !details.open;
          }
        });
      }
    });
  });
</script>